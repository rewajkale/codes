/*
* Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
* If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
* The replacement must be in-place, do not allocate extra memory.
* Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
* 1,2,3 → 1,3,2
* 3,2,1 → 1,2,3
* 1,1,5 → 1,5,1
*/
public class Solution {
    public void nextPermutation(int[] nums) 
	{
        int cases=1,currIndex=-1,startIndex=-1,prevCase=0;
        ArrayDeque<Integer> arr=new ArrayDeque<>();
        if(nums.length!=0&&nums.length!=1)
        {
        	for(int i=1;i<nums.length;i++)
        	{
        		if(nums[i]>nums[i-1])
        		{
        		    prevCase=0;
        			if(cases==2||cases==0)
        			{
        				arr.clear();
        				currIndex=-1;
        				startIndex=-1;
        			}
        			cases=1;
        		}
        		else if(nums[i]<nums[i-1])
        		{
        		    prevCase=0;
        			if(startIndex==-1||(cases==0&&startIndex!=-1))
        				startIndex=i-1;
        			if(currIndex==-1&&(startIndex-1)>=0)
        				currIndex=i-2;
        			if(arr.size()==0)
        				arr.push(nums[i-1]);
        			cases=2;
        			arr.push(nums[i]);
        			//System.out.println("here: "+arr);
        			//System.out.println("index: "+currIndex);
        		}
        		else
        		{
        		    if(prevCase==0)
        				prevCase=cases;
        		    cases=0;
        			if(startIndex==-1)
        				startIndex=i-1;
        			if(currIndex==-1&&(startIndex-1)>=0)
        				currIndex=i-2;
        			if(arr.size()==0)
        				arr.push(nums[i-1]);
        			arr.push(nums[i]);
        			//System.out.println(arr);
        		}
        		//System.out.println(currIndex);
        	}
        	//System.out.println(arr);
        	if(cases==0)
        		cases=prevCase;
        	if(cases==1)
        	{
        		if(nums[nums.length-2]==nums[nums.length-1])
        			cases=2;
        		else
        		{
        		int temp=nums[nums.length-2];
        		nums[nums.length-2]=nums[nums.length-1];
        		nums[nums.length-1]=temp;
        		}
        	}
        	if(cases==2)
        	{
        		if(currIndex==-1)
        		{
        			for(int i=0;i<nums.length;i++)
        				nums[i]=arr.pop();
        		}
        		else
        		{
        			int i=currIndex+1;
        			while(arr.size()!=0&&arr.peek()<=nums[currIndex])
        			{
        				nums[i]=arr.pop();
        				i++;
        			}
        			nums[i++]=nums[currIndex];
        			//System.out.println("peek: "+arr.peek());
        			nums[currIndex]=arr.pop();
        			/*for(int j=0;j<nums.length;j++)
                		System.out.println("nums:"+nums[j]);*/
        			while(i<nums.length)
        			{
        				//System.out.println("peek: "+arr.peek());
        				nums[i++]=arr.pop();
        			}
        		}
        	}
        	/*for(int i=0;i<nums.length;i++)
        		System.out.println("nums:"+nums[i]);*/
        }
    }
}
