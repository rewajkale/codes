/**
 * Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
 * If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
 * You may not alter the values in the nodes, only nodes itself may be changed. Only constant memory is allowed.
 * For example, Given this linked list: 1->2->3->4->5 For k = 2, you should return: 2->1->4->3->5
 * For k = 3, you should return: 3->2->1->4->5
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k==0)
            return head;
        ListNode temp=head,prev=null,curr=null;
        int count=0;
        ArrayDeque<ListNode> arr=new ArrayDeque<>();
        while(temp!=null)
        {
            if(count<k)
            {
                arr.push(temp);
                count++;
                temp=temp.next;
            }
            if(count==k)
            {
                if(prev==null)
                {
                    prev=arr.pop();
                    head=prev;
                    curr=head;
                }
                while(arr.size()!=0)
                {
                    curr.next=arr.pop();
                    curr=curr.next;
                }
                curr.next=temp;
                count=0;
            }
        }
        return head;
    }
}
